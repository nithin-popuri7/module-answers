### program 1:
### Ex -01 Newton raphson method:
~~~
def f(x):
return 0;
def f1(x):
return 3*x**2-1
x0=float(input("Enter the initial approximation: "))
for i in range (1, 10);
xn = x0-f(x0)/f1(x0)
x0= xn
print("The approximate root using Newton - raphson method is %.4f"%xn)
~~~

### Program 2:
### Ex-02 Gauss seidal method:
~~~

x0=0; y0=0; z0=0
for i in range (1, 10):
x=1/4*(1-y0-z0)
x0=x
y=1/3*(2-x0-z0)
y0=y
z=1/5*(3-x0-y0)
z0=z
print("The approximate solution of x = %.4f, y = %.4f, z=%.4f"% (x, y, z))
~~~
### Program 3:
### Lagranges interpolation method:
x = {0,1,2,3,4,5,6}
y={1,14,15,5,6,19}
s= float(input("Enter the values of x to be in : "))
sum = 0
for i in range (0, 6):
prod = 1
for j in range (0, 6):
if i!=j:
prod = prod*(s-x[j])/(x[i]-x[j])
sum = sum+prod*y[i]
printf("The functional value is %.4f"%sum)
~~~
### Program 4:
### Ex-04 TR=rapezoidal rule:
def f(x):
return 1/(1+x**2)
a=float(input("Enter the lower limit: "))
b = float(input("Enter the upper limit: "))
h=float(input("Enter the step size: "))
n=int((b-a)/h)
sum = 0
for i in range (1, n):
sum = sum+f(a+i*h)
trap = h/2*(f(a)+f(b)+2*sum)
print ("The integral value is %.5f"%trap)
~~~


